/*** Autogenerated by WIDL 7.21 from include/dxcore.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __dxcore_h__
#define __dxcore_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __IDXCoreAdapter_FWD_DEFINED__
#define __IDXCoreAdapter_FWD_DEFINED__
typedef interface IDXCoreAdapter IDXCoreAdapter;
#ifdef __cplusplus
interface IDXCoreAdapter;
#endif /* __cplusplus */
#endif

#ifndef __IDXCoreAdapterList_FWD_DEFINED__
#define __IDXCoreAdapterList_FWD_DEFINED__
typedef interface IDXCoreAdapterList IDXCoreAdapterList;
#ifdef __cplusplus
interface IDXCoreAdapterList;
#endif /* __cplusplus */
#endif

#ifndef __IDXCoreAdapterFactory_FWD_DEFINED__
#define __IDXCoreAdapterFactory_FWD_DEFINED__
typedef interface IDXCoreAdapterFactory IDXCoreAdapterFactory;
#ifdef __cplusplus
interface IDXCoreAdapterFactory;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#define _FACDXCORE 0x880
#define MAKE_DXCORE_HRESULT(code) MAKE_HRESULT(1, _FACDXCORE, code)
#if 0
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID;
typedef struct _LUID *PLUID;
#endif
typedef enum DXCoreAdapterProperty {
    InstanceLuid = 0,
    DriverVersion = 1,
    DriverDescription = 2,
    HardwareID = 3,
    KmdModelVersion = 4,
    ComputePreemptionGranularity = 5,
    GraphicsPreemptionGranularity = 6,
    DedicatedAdapterMemory = 7,
    DedicatedSystemMemory = 8,
    SharedSystemMemory = 9,
    AcgCompatible = 10,
    IsHardware = 11,
    IsIntegrated = 12,
    IsDetachable = 13,
    HardwareIDParts = 14
} DXCoreAdapterProperty;
typedef enum DXCoreAdapterState {
    IsDriverUpdateInProgress = 0,
    AdapterMemoryBudget = 1
} DXCoreAdapterState;
typedef enum DXCoreSegmentGroup {
    Local = 0,
    NonLocal = 1
} DXCoreSegmentGroup;
typedef enum DXCoreNotificationType {
    AdapterListStale = 0,
    AdapterNoLongerValid = 1,
    AdapterBudgetChange = 2,
    AdapterHardwareContentProtectionTeardown = 3
} DXCoreNotificationType;
typedef enum DXCoreAdapterPreference {
    Hardware = 0,
    MinimumPower = 1,
    HighPerformance = 2
} DXCoreAdapterPreference;
typedef struct DXCoreHardwareID {
    UINT32 vendorID;
    UINT32 deviceID;
    UINT32 subSysID;
    UINT32 revision;
} DXCoreHardwareID;
typedef struct DXCoreHardwareIDParts {
    UINT32 vendorID;
    UINT32 deviceID;
    UINT32 subSystemID;
    UINT32 subVendorID;
    UINT32 revisionID;
} DXCoreHardwareIDParts;
typedef struct DXCoreAdapterMemoryBudgetNodeSegmentGroup {
    UINT32 nodeIndex;
    DXCoreSegmentGroup segmentGroup;
} DXCoreAdapterMemoryBudgetNodeSegmentGroup;
typedef struct DXCoreAdapterMemoryBudget {
    UINT64 budget;
    UINT64 currentUsage;
    UINT64 availableForReservation;
    UINT64 currentReservation;
} DXCoreAdapterMemoryBudget;
typedef void (WINAPI *PFN_DXCORE_NOTIFICATION_CALLBACK)(DXCoreNotificationType notificationType, IUnknown *object, void *context);
DEFINE_GUID(DXCORE_ADAPTER_ATTRIBUTE_D3D11_GRAPHICS, 0x8c47866b, 0x7583, 0x450d, 0xf0, 0xf0, 0x6b, 0xad, 0xa8, 0x95, 0xaf, 0x4b);
DEFINE_GUID(DXCORE_ADAPTER_ATTRIBUTE_D3D12_GRAPHICS, 0x0c9ece4d, 0x2f6e, 0x4f01, 0x8c, 0x96, 0xe8, 0x9e, 0x33, 0x1b, 0x47, 0xb1);
DEFINE_GUID(DXCORE_ADAPTER_ATTRIBUTE_D3D12_CORE_COMPUTE, 0x248e2800, 0xa793, 0x4724, 0xab, 0xaa, 0x23, 0xa6, 0xde, 0x1b, 0xe0, 0x90);
/*****************************************************************************
 * IDXCoreAdapter interface
 */
#ifndef __IDXCoreAdapter_INTERFACE_DEFINED__
#define __IDXCoreAdapter_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXCoreAdapter, 0xf0db4c7f, 0xfe5a, 0x42a2, 0xbd,0x62, 0xf2,0xa6,0xcf,0x6f,0xc8,0x3e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f0db4c7f-fe5a-42a2-bd62-f2a6cf6fc83e")
IDXCoreAdapter : public IUnknown
{
    virtual boolean STDMETHODCALLTYPE IsValid(
        ) = 0;

    virtual boolean STDMETHODCALLTYPE IsAttributeSupported(
        REFGUID attributeGUID) = 0;

    virtual boolean STDMETHODCALLTYPE IsPropertySupported(
        DXCoreAdapterProperty property) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProperty(
        DXCoreAdapterProperty property,
        SIZE_T bufferSize,
        void *propertyData) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPropertySize(
        DXCoreAdapterProperty property,
        SIZE_T *bufferSize) = 0;

    virtual boolean STDMETHODCALLTYPE IsQueryStateSupported(
        DXCoreAdapterState property) = 0;

    virtual HRESULT STDMETHODCALLTYPE QueryState(
        DXCoreAdapterState state,
        SIZE_T inputStateDetailsSize,
        const void *inputStateDetails,
        SIZE_T outputBufferSize,
        void *outputBuffer) = 0;

    virtual boolean STDMETHODCALLTYPE IsSetStateSupported(
        DXCoreAdapterState property) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetState(
        DXCoreAdapterState state,
        SIZE_T inputStateDetailsSize,
        const void *inputStateDetails,
        SIZE_T inputDataSize,
        const void *inputData) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFactory(
        REFIID riid,
        void **ppvFactory) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXCoreAdapter, 0xf0db4c7f, 0xfe5a, 0x42a2, 0xbd,0x62, 0xf2,0xa6,0xcf,0x6f,0xc8,0x3e)
#endif
#else
typedef struct IDXCoreAdapterVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXCoreAdapter *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXCoreAdapter *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXCoreAdapter *This);

    /*** IDXCoreAdapter methods ***/
    boolean (STDMETHODCALLTYPE *IsValid)(
        IDXCoreAdapter *This);

    boolean (STDMETHODCALLTYPE *IsAttributeSupported)(
        IDXCoreAdapter *This,
        REFGUID attributeGUID);

    boolean (STDMETHODCALLTYPE *IsPropertySupported)(
        IDXCoreAdapter *This,
        DXCoreAdapterProperty property);

    HRESULT (STDMETHODCALLTYPE *GetProperty)(
        IDXCoreAdapter *This,
        DXCoreAdapterProperty property,
        SIZE_T bufferSize,
        void *propertyData);

    HRESULT (STDMETHODCALLTYPE *GetPropertySize)(
        IDXCoreAdapter *This,
        DXCoreAdapterProperty property,
        SIZE_T *bufferSize);

    boolean (STDMETHODCALLTYPE *IsQueryStateSupported)(
        IDXCoreAdapter *This,
        DXCoreAdapterState property);

    HRESULT (STDMETHODCALLTYPE *QueryState)(
        IDXCoreAdapter *This,
        DXCoreAdapterState state,
        SIZE_T inputStateDetailsSize,
        const void *inputStateDetails,
        SIZE_T outputBufferSize,
        void *outputBuffer);

    boolean (STDMETHODCALLTYPE *IsSetStateSupported)(
        IDXCoreAdapter *This,
        DXCoreAdapterState property);

    HRESULT (STDMETHODCALLTYPE *SetState)(
        IDXCoreAdapter *This,
        DXCoreAdapterState state,
        SIZE_T inputStateDetailsSize,
        const void *inputStateDetails,
        SIZE_T inputDataSize,
        const void *inputData);

    HRESULT (STDMETHODCALLTYPE *GetFactory)(
        IDXCoreAdapter *This,
        REFIID riid,
        void **ppvFactory);

    END_INTERFACE
} IDXCoreAdapterVtbl;

interface IDXCoreAdapter {
    CONST_VTBL IDXCoreAdapterVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXCoreAdapter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXCoreAdapter_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXCoreAdapter_Release(This) (This)->lpVtbl->Release(This)
/*** IDXCoreAdapter methods ***/
#define IDXCoreAdapter_IsValid(This) (This)->lpVtbl->IsValid(This)
#define IDXCoreAdapter_IsAttributeSupported(This,attributeGUID) (This)->lpVtbl->IsAttributeSupported(This,attributeGUID)
#define IDXCoreAdapter_IsPropertySupported(This,property) (This)->lpVtbl->IsPropertySupported(This,property)
#define IDXCoreAdapter_GetProperty(This,property,bufferSize,propertyData) (This)->lpVtbl->GetProperty(This,property,bufferSize,propertyData)
#define IDXCoreAdapter_GetPropertySize(This,property,bufferSize) (This)->lpVtbl->GetPropertySize(This,property,bufferSize)
#define IDXCoreAdapter_IsQueryStateSupported(This,property) (This)->lpVtbl->IsQueryStateSupported(This,property)
#define IDXCoreAdapter_QueryState(This,state,inputStateDetailsSize,inputStateDetails,outputBufferSize,outputBuffer) (This)->lpVtbl->QueryState(This,state,inputStateDetailsSize,inputStateDetails,outputBufferSize,outputBuffer)
#define IDXCoreAdapter_IsSetStateSupported(This,property) (This)->lpVtbl->IsSetStateSupported(This,property)
#define IDXCoreAdapter_SetState(This,state,inputStateDetailsSize,inputStateDetails,inputDataSize,inputData) (This)->lpVtbl->SetState(This,state,inputStateDetailsSize,inputStateDetails,inputDataSize,inputData)
#define IDXCoreAdapter_GetFactory(This,riid,ppvFactory) (This)->lpVtbl->GetFactory(This,riid,ppvFactory)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IDXCoreAdapter_QueryInterface(IDXCoreAdapter* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IDXCoreAdapter_AddRef(IDXCoreAdapter* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IDXCoreAdapter_Release(IDXCoreAdapter* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXCoreAdapter methods ***/
static __WIDL_INLINE boolean IDXCoreAdapter_IsValid(IDXCoreAdapter* This) {
    return This->lpVtbl->IsValid(This);
}
static __WIDL_INLINE boolean IDXCoreAdapter_IsAttributeSupported(IDXCoreAdapter* This,REFGUID attributeGUID) {
    return This->lpVtbl->IsAttributeSupported(This,attributeGUID);
}
static __WIDL_INLINE boolean IDXCoreAdapter_IsPropertySupported(IDXCoreAdapter* This,DXCoreAdapterProperty property) {
    return This->lpVtbl->IsPropertySupported(This,property);
}
static __WIDL_INLINE HRESULT IDXCoreAdapter_GetProperty(IDXCoreAdapter* This,DXCoreAdapterProperty property,SIZE_T bufferSize,void *propertyData) {
    return This->lpVtbl->GetProperty(This,property,bufferSize,propertyData);
}
static __WIDL_INLINE HRESULT IDXCoreAdapter_GetPropertySize(IDXCoreAdapter* This,DXCoreAdapterProperty property,SIZE_T *bufferSize) {
    return This->lpVtbl->GetPropertySize(This,property,bufferSize);
}
static __WIDL_INLINE boolean IDXCoreAdapter_IsQueryStateSupported(IDXCoreAdapter* This,DXCoreAdapterState property) {
    return This->lpVtbl->IsQueryStateSupported(This,property);
}
static __WIDL_INLINE HRESULT IDXCoreAdapter_QueryState(IDXCoreAdapter* This,DXCoreAdapterState state,SIZE_T inputStateDetailsSize,const void *inputStateDetails,SIZE_T outputBufferSize,void *outputBuffer) {
    return This->lpVtbl->QueryState(This,state,inputStateDetailsSize,inputStateDetails,outputBufferSize,outputBuffer);
}
static __WIDL_INLINE boolean IDXCoreAdapter_IsSetStateSupported(IDXCoreAdapter* This,DXCoreAdapterState property) {
    return This->lpVtbl->IsSetStateSupported(This,property);
}
static __WIDL_INLINE HRESULT IDXCoreAdapter_SetState(IDXCoreAdapter* This,DXCoreAdapterState state,SIZE_T inputStateDetailsSize,const void *inputStateDetails,SIZE_T inputDataSize,const void *inputData) {
    return This->lpVtbl->SetState(This,state,inputStateDetailsSize,inputStateDetails,inputDataSize,inputData);
}
static __WIDL_INLINE HRESULT IDXCoreAdapter_GetFactory(IDXCoreAdapter* This,REFIID riid,void **ppvFactory) {
    return This->lpVtbl->GetFactory(This,riid,ppvFactory);
}
#endif
#endif

#endif


#endif  /* __IDXCoreAdapter_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXCoreAdapterList interface
 */
#ifndef __IDXCoreAdapterList_INTERFACE_DEFINED__
#define __IDXCoreAdapterList_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXCoreAdapterList, 0x526c7776, 0x40e9, 0x459b, 0xb7,0x11, 0xf3,0x2a,0xd7,0x6d,0xfc,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("526c7776-40e9-459b-b711-f32ad76dfc28")
IDXCoreAdapterList : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetAdapter(
        UINT32 index,
        REFIID riid,
        void **ppvAdapter) = 0;

    virtual UINT32 STDMETHODCALLTYPE GetAdapterCount(
        ) = 0;

    virtual boolean STDMETHODCALLTYPE IsStale(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFactory(
        REFIID riid,
        void **ppvFactory) = 0;

    virtual HRESULT STDMETHODCALLTYPE Sort(
        UINT32 numPreferences,
        const DXCoreAdapterPreference *preferences) = 0;

    virtual boolean STDMETHODCALLTYPE IsAdapterPreferenceSupported(
        DXCoreAdapterPreference preference) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXCoreAdapterList, 0x526c7776, 0x40e9, 0x459b, 0xb7,0x11, 0xf3,0x2a,0xd7,0x6d,0xfc,0x28)
#endif
#else
typedef struct IDXCoreAdapterListVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXCoreAdapterList *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXCoreAdapterList *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXCoreAdapterList *This);

    /*** IDXCoreAdapterList methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
        IDXCoreAdapterList *This,
        UINT32 index,
        REFIID riid,
        void **ppvAdapter);

    UINT32 (STDMETHODCALLTYPE *GetAdapterCount)(
        IDXCoreAdapterList *This);

    boolean (STDMETHODCALLTYPE *IsStale)(
        IDXCoreAdapterList *This);

    HRESULT (STDMETHODCALLTYPE *GetFactory)(
        IDXCoreAdapterList *This,
        REFIID riid,
        void **ppvFactory);

    HRESULT (STDMETHODCALLTYPE *Sort)(
        IDXCoreAdapterList *This,
        UINT32 numPreferences,
        const DXCoreAdapterPreference *preferences);

    boolean (STDMETHODCALLTYPE *IsAdapterPreferenceSupported)(
        IDXCoreAdapterList *This,
        DXCoreAdapterPreference preference);

    END_INTERFACE
} IDXCoreAdapterListVtbl;

interface IDXCoreAdapterList {
    CONST_VTBL IDXCoreAdapterListVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXCoreAdapterList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXCoreAdapterList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXCoreAdapterList_Release(This) (This)->lpVtbl->Release(This)
/*** IDXCoreAdapterList methods ***/
#define IDXCoreAdapterList_GetAdapter(This,index,riid,ppvAdapter) (This)->lpVtbl->GetAdapter(This,index,riid,ppvAdapter)
#define IDXCoreAdapterList_GetAdapterCount(This) (This)->lpVtbl->GetAdapterCount(This)
#define IDXCoreAdapterList_IsStale(This) (This)->lpVtbl->IsStale(This)
#define IDXCoreAdapterList_GetFactory(This,riid,ppvFactory) (This)->lpVtbl->GetFactory(This,riid,ppvFactory)
#define IDXCoreAdapterList_Sort(This,numPreferences,preferences) (This)->lpVtbl->Sort(This,numPreferences,preferences)
#define IDXCoreAdapterList_IsAdapterPreferenceSupported(This,preference) (This)->lpVtbl->IsAdapterPreferenceSupported(This,preference)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IDXCoreAdapterList_QueryInterface(IDXCoreAdapterList* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IDXCoreAdapterList_AddRef(IDXCoreAdapterList* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IDXCoreAdapterList_Release(IDXCoreAdapterList* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXCoreAdapterList methods ***/
static __WIDL_INLINE HRESULT IDXCoreAdapterList_GetAdapter(IDXCoreAdapterList* This,UINT32 index,REFIID riid,void **ppvAdapter) {
    return This->lpVtbl->GetAdapter(This,index,riid,ppvAdapter);
}
static __WIDL_INLINE UINT32 IDXCoreAdapterList_GetAdapterCount(IDXCoreAdapterList* This) {
    return This->lpVtbl->GetAdapterCount(This);
}
static __WIDL_INLINE boolean IDXCoreAdapterList_IsStale(IDXCoreAdapterList* This) {
    return This->lpVtbl->IsStale(This);
}
static __WIDL_INLINE HRESULT IDXCoreAdapterList_GetFactory(IDXCoreAdapterList* This,REFIID riid,void **ppvFactory) {
    return This->lpVtbl->GetFactory(This,riid,ppvFactory);
}
static __WIDL_INLINE HRESULT IDXCoreAdapterList_Sort(IDXCoreAdapterList* This,UINT32 numPreferences,const DXCoreAdapterPreference *preferences) {
    return This->lpVtbl->Sort(This,numPreferences,preferences);
}
static __WIDL_INLINE boolean IDXCoreAdapterList_IsAdapterPreferenceSupported(IDXCoreAdapterList* This,DXCoreAdapterPreference preference) {
    return This->lpVtbl->IsAdapterPreferenceSupported(This,preference);
}
#endif
#endif

#endif


#endif  /* __IDXCoreAdapterList_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXCoreAdapterFactory interface
 */
#ifndef __IDXCoreAdapterFactory_INTERFACE_DEFINED__
#define __IDXCoreAdapterFactory_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXCoreAdapterFactory, 0x78ee5945, 0xc36e, 0x4b13, 0xa6,0x69, 0x00,0x5d,0xd1,0x1c,0x0f,0x06);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("78ee5945-c36e-4b13-a669-005dd11c0f06")
IDXCoreAdapterFactory : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE CreateAdapterList(
        UINT32 numAttributes,
        const GUID *filterAttributes,
        REFIID riid,
        void **ppvAdapterList) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAdapterByLuid(
        const LUID adapterLUID,
        REFIID riid,
        void **ppvAdapter) = 0;

    virtual boolean STDMETHODCALLTYPE IsNotificationTypeSupported(
        DXCoreNotificationType notificationType) = 0;

    virtual HRESULT STDMETHODCALLTYPE RegisterEventNotification(
        IUnknown *dxCoreObject,
        DXCoreNotificationType notificationType,
        void *callbackFunction,
        void *callbackContext,
        UINT32 *eventCookie) = 0;

    virtual HRESULT STDMETHODCALLTYPE UnregisterEventNotification(
        UINT32 eventCookie) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXCoreAdapterFactory, 0x78ee5945, 0xc36e, 0x4b13, 0xa6,0x69, 0x00,0x5d,0xd1,0x1c,0x0f,0x06)
#endif
#else
typedef struct IDXCoreAdapterFactoryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXCoreAdapterFactory *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXCoreAdapterFactory *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXCoreAdapterFactory *This);

    /*** IDXCoreAdapterFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *CreateAdapterList)(
        IDXCoreAdapterFactory *This,
        UINT32 numAttributes,
        const GUID *filterAttributes,
        REFIID riid,
        void **ppvAdapterList);

    HRESULT (STDMETHODCALLTYPE *GetAdapterByLuid)(
        IDXCoreAdapterFactory *This,
        const LUID adapterLUID,
        REFIID riid,
        void **ppvAdapter);

    boolean (STDMETHODCALLTYPE *IsNotificationTypeSupported)(
        IDXCoreAdapterFactory *This,
        DXCoreNotificationType notificationType);

    HRESULT (STDMETHODCALLTYPE *RegisterEventNotification)(
        IDXCoreAdapterFactory *This,
        IUnknown *dxCoreObject,
        DXCoreNotificationType notificationType,
        void *callbackFunction,
        void *callbackContext,
        UINT32 *eventCookie);

    HRESULT (STDMETHODCALLTYPE *UnregisterEventNotification)(
        IDXCoreAdapterFactory *This,
        UINT32 eventCookie);

    END_INTERFACE
} IDXCoreAdapterFactoryVtbl;

interface IDXCoreAdapterFactory {
    CONST_VTBL IDXCoreAdapterFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXCoreAdapterFactory_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXCoreAdapterFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXCoreAdapterFactory_Release(This) (This)->lpVtbl->Release(This)
/*** IDXCoreAdapterFactory methods ***/
#define IDXCoreAdapterFactory_CreateAdapterList(This,numAttributes,filterAttributes,riid,ppvAdapterList) (This)->lpVtbl->CreateAdapterList(This,numAttributes,filterAttributes,riid,ppvAdapterList)
#define IDXCoreAdapterFactory_GetAdapterByLuid(This,adapterLUID,riid,ppvAdapter) (This)->lpVtbl->GetAdapterByLuid(This,adapterLUID,riid,ppvAdapter)
#define IDXCoreAdapterFactory_IsNotificationTypeSupported(This,notificationType) (This)->lpVtbl->IsNotificationTypeSupported(This,notificationType)
#define IDXCoreAdapterFactory_RegisterEventNotification(This,dxCoreObject,notificationType,callbackFunction,callbackContext,eventCookie) (This)->lpVtbl->RegisterEventNotification(This,dxCoreObject,notificationType,callbackFunction,callbackContext,eventCookie)
#define IDXCoreAdapterFactory_UnregisterEventNotification(This,eventCookie) (This)->lpVtbl->UnregisterEventNotification(This,eventCookie)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IDXCoreAdapterFactory_QueryInterface(IDXCoreAdapterFactory* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IDXCoreAdapterFactory_AddRef(IDXCoreAdapterFactory* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IDXCoreAdapterFactory_Release(IDXCoreAdapterFactory* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXCoreAdapterFactory methods ***/
static __WIDL_INLINE HRESULT IDXCoreAdapterFactory_CreateAdapterList(IDXCoreAdapterFactory* This,UINT32 numAttributes,const GUID *filterAttributes,REFIID riid,void **ppvAdapterList) {
    return This->lpVtbl->CreateAdapterList(This,numAttributes,filterAttributes,riid,ppvAdapterList);
}
static __WIDL_INLINE HRESULT IDXCoreAdapterFactory_GetAdapterByLuid(IDXCoreAdapterFactory* This,const LUID adapterLUID,REFIID riid,void **ppvAdapter) {
    return This->lpVtbl->GetAdapterByLuid(This,adapterLUID,riid,ppvAdapter);
}
static __WIDL_INLINE boolean IDXCoreAdapterFactory_IsNotificationTypeSupported(IDXCoreAdapterFactory* This,DXCoreNotificationType notificationType) {
    return This->lpVtbl->IsNotificationTypeSupported(This,notificationType);
}
static __WIDL_INLINE HRESULT IDXCoreAdapterFactory_RegisterEventNotification(IDXCoreAdapterFactory* This,IUnknown *dxCoreObject,DXCoreNotificationType notificationType,void *callbackFunction,void *callbackContext,UINT32 *eventCookie) {
    return This->lpVtbl->RegisterEventNotification(This,dxCoreObject,notificationType,callbackFunction,callbackContext,eventCookie);
}
static __WIDL_INLINE HRESULT IDXCoreAdapterFactory_UnregisterEventNotification(IDXCoreAdapterFactory* This,UINT32 eventCookie) {
    return This->lpVtbl->UnregisterEventNotification(This,eventCookie);
}
#endif
#endif

#endif


#endif  /* __IDXCoreAdapterFactory_INTERFACE_DEFINED__ */

STDAPI DXCoreCreateAdapterFactory(REFIID riid, void **ppvFactory);
HRESULT __stdcall  DXCoreCreateAdapterFactory(REFIID riid,void **ppvFactory);

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __dxcore_h__ */
